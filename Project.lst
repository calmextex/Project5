Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/05/23 13:43:40
*Project5_zamoraab     (Proj5_zamoraab.asm		     Page 1 - 1


				TITLE Project5_zamoraab     (Proj5_zamoraab.asm)

				; Author: Abraham Zamora
				; Last Modified: 3/5/2026
				; OSU email address: zamoraab@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: Project Number 5                Due Date: 3/5/2023
				; Description: Program generates values into an array, then sorts the array,
				;	provides the median, and counts the instances of each number in the array.
				;	Size of array and low and high values are constants, and program accounts for any changes
				;	to these constants.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


					; Program constants

 = 000000C8				ARRAYSIZE = 200		; set ARRAYSIZE. Initially set to 200 but can be adjusted.
 = 0000000F				LO = 15				; set LO for lowest value
 = 00000032				HI = 50				; Set HI for highest value


 00000000			.data
					; string variables
 00000000 47 65 6E 65 72		progName	BYTE	"Generating, Sorting, and Counting Random Integers! Programmed by Abraham Zamora",0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 21
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   41 62 72 61 68
	   61 6D 20 5A 61
	   6D 6F 72 61 00
 00000050 54 68 69 73 20		progDesc	BYTE	"This program generates 200 random integers between 15 and 50, inclusive.",13,10,
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 31 35 20 61
	   6E 64 20 35 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 0D 0A 49
	   74 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6F 72 69 67 69
	   6E 61 6C 20 6C
	   69 73 74 2C 20
	   73 6F 72 74 73
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 0D 0A 6F 66
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 61
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2C
	   20 61 6E 64 20
	   66 69 6E 61 6C
	   6C 79 20 64 69
	   73 70 6C 61 79
	   73 0D 0A 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   67 65 6E 65 72
	   61 74 65 64 20
	   76 61 6C 75 65
	   2C 20 73 74 61
	   72 74 69 6E 67
	   20 77 69 74 68
	   20 74 68 65 0D
	   0A 6C 6F 77 65
	   73 74 20 6E 75
	   6D 62 65 72 2E
	   00
										"It then displays the original list, sorts the list, displays the median value",13,10,
										"of the list, displays the list sorted in ascending order, and finally displays",13,10,
										"the number of instances of each generated value, starting with the",13,10,
										"lowest number.",0

 0000018C 59 6F 75 72 20		unsortNo	BYTE	"Your unsorted random numbers:",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000001AA 54 68 65 20 6D		median		BYTE	"The median value of the array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000001CA 59 6F 75 72 20		sortNum		BYTE	"Your sorted random numbers:",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 000001E6 59 6F 75 72 20		instance	BYTE	"Your list of instances of each generated number, starting with the smallest value:",0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 00
 00000239 47 6F 6F 64 62		outro		BYTE	"Goodbye, and thanks for using my program!",0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 00
 00000263 20 20 00			spacing		BYTE	"  ",0


					; additional variables
 00000266  000000C8 [			randArray	DWORD	ARRAYSIZE DUP(?)	; array that will store randomnly generated values, with a size based on ARRAYSIZE
	    00000000
	   ]
 00000586  00000024 [			counts		DWORD	HI-LO + 1 DUP(0)	; array that will store the count of each number
	    00000000
	   ]
 00000616 000000C8			array		DWORD	LENGTHOF randArray	; length of the randArray
 0000061A 00000024			countsLen	DWORD	LENGTHOF counts		; length of the counts array
					


					

 00000000			.code

 00000000			main PROC

					; call Randomize to be able to generate random numbers
 00000000  E8 00000000 E		call Randomize		

					; call introduction to the program
 00000005  68 00000000 R		PUSH OFFSET progName
 0000000A  68 00000050 R		PUSH OFFSET	progDesc
 0000000F  E8 00000091			call introduction

					; call the fillArray procedure that will generate numbers and fill an array
 00000014  68 00000266 R		PUSH OFFSET	randArray
 00000019  E8 000000B4			call fillArray

					; call displayList to print the numbers in the array
 0000001E  FF 35 00000616 R		PUSH array
 00000024  68 00000266 R		PUSH OFFSET randArray
 00000029  68 00000263 R		PUSH OFFSET	spacing
 0000002E  68 0000018C R		PUSH OFFSET unsortNo
 00000033  E8 00000171			CALL displayList

					; call sortList and sort the array in ascending order 
 00000038  68 00000266 R		PUSH OFFSET randArray
 0000003D  E8 000000BD			call sortList

					; call displayMedian to show the median number in the array
 00000042  68 00000266 R		PUSH OFFSET randArray
 00000047  68 000001AA R		PUSH OFFSET median
 0000004C  E8 000000F9			call displayMedian

					; call sortList again in order to show the new sorted array
 00000051  FF 35 00000616 R		PUSH array
 00000057  68 00000266 R		push OFFSET randArray
 0000005C  68 00000263 R		push OFFSET spacing
 00000061  68 000001CA R		push OFFSET sortNum
 00000066  E8 0000013E			call displayList 

					;call countList to count the instance of each number
 0000006B  68 00000586 R		PUSH OFFSET counts
 00000070  68 00000266 R		push OFFSET randArray
 00000075  E8 00000186			call countList

					; call displayList one more time to show the instance of each number
 0000007A  FF 35 0000061A R		push countsLen
 00000080  68 00000586 R		push OFFSET counts
 00000085  68 00000263 R		push OFFSET spacing
 0000008A  68 000001E6 R		push OFFSET instance
 0000008F  E8 00000115			call displayList

					; call the outroMessage to show departing message and close program
 00000094  68 00000239 R		push OFFSET	outro
 00000099  E8 0000019A			CALL outroMessage

					Invoke ExitProcess,0	; exit to operating system
 0000009E  6A 00	   *	    push   +000000000h
 000000A0  E8 00000000 E   *	    call   ExitProcess

 000000A5			main ENDP

				;-----------------------------------------------------
				; Name: introduction
				;
				; Introduction procedures for program, with title, author, and
				;	the description of what the program will do.
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives: progName and progDesc by reference
				;
				; Returns: Nothing
				;
				;-----------------------------------------------------
 000000A5			introduction PROC
					; push registers into stack
 000000A5  55				PUSH	EBP
 000000A6  8B EC			MOV		EBP, ESP
 000000A8  52				PUSH	EDX
 000000A9  8B 55 0C			MOV		EDX, [EBP+12]


					; display progName and progDesc
 000000AC  E8 00000000 E		CALL	WriteString
 000000B1  E8 00000000 E		CALL	CrLF
 000000B6  E8 00000000 E		call	CrLf
 000000BB  8B 55 08			MOV		EDX, [EBP+8]
 000000BE  E8 00000000 E		CALL	WriteString
 000000C3  E8 00000000 E		CALL	CrLf
 000000C8  E8 00000000 E		CALL	CrLf

					; pop edx and ebp registers off the stack
 000000CD  5A				POP		EDX
 000000CE  5D				POP		EBP
 000000CF  C2 0008			RET		8

 000000D2			introduction ENDP

				;-----------------------------------------------
				; Name: fillArray
				;
				; Random numbers are generated within HI and LO (inclusive)
				;	and fill randArray with size ARRAYSIZE
				;
				; Preconditions: empty array with DWORD elements
				;
				; Postconditions: none
				;
				; Receives: randArray that is empty by reference
				;
				; Returns: filled randArray with generated values by reference
				;
				;------------------------------------------------

 000000D2			fillArray PROC
					; push registers to stack
 000000D2  55				PUSH	EBP
 000000D3  8B EC			MOV		EBP, ESP
 000000D5  50				PUSH	EAX
 000000D6  51				PUSH	ECX
 000000D7  57				PUSH	EDI
 000000D8  B9 000000C8			MOV		ECX, ARRAYSIZE
 000000DD  8B 7D 08			MOV		EDI, [EBP + 8]

				; fill will subtract LO from HI, add 1, and then generate a random number
 000000E0			_fill:
 000000E0  B8 00000032			MOV		EAX, HI
 000000E5  83 E8 0F			SUB		EAX, LO		; subtract LO from HI
 000000E8  40				INC		EAX			; add 1
 000000E9  E8 00000000 E		CALL	RandomRange	; RandomRange will generate random numbers
 000000EE  83 C0 0F			ADD		EAX, LO		; add LO to this random number to get a number between LO and HI
 000000F1  89 07			MOV		[EDI], EAX
 000000F3  83 C7 04			ADD		EDI, 4
 000000F6  E2 E8			loop	_fill

					; pop registers from stack and return
 000000F8  5F				POP		EDI
 000000F9  59				POP		ECX
 000000FA  58				POP		EAX
 000000FB  5D				POP		EBP
 000000FC  C2 0004			RET		4

 000000FF			fillArray ENDP

				;----------------------------------------------
				; Name: sortList
				;
				; Sorts an array using bubble sort. Sorted in ascending order.
				;	Returns a sorted array
				;
				; Preconditions: DWORD array
				;
				; Postconditions: None
				;
				; Receives: randArray (unsorted) by reference
				;
				; Returns: sorted randArray by reference
				;
				;----------------------------------------------

 000000FF			sortList PROC

					; push registers onto stack
 000000FF  55				PUSH	EBP
 00000100  8B EC			MOV		EBP, ESP
 00000102  56				PUSH	ESI
 00000103  51				PUSH	ECX
 00000104  52				PUSH	EDX

 00000105			_sort:
 00000105  BA 00000000			mov		EDX,0				; if elements are swapped. intial set edx to zero
 0000010A  8B 75 08			MOV		ESI, [EBP + 8]
 0000010D  B9 000000C8			mov		ECX, ARRAYSIZE
 00000112  49				DEC		ecx

				; inner loop
 00000113			_swap:
 00000113  8B 06			MOV		EAX, [ESI]
 00000115  3B 46 04			cmp		eax, [esi + 4]
 00000118  7E 0B			jle		_noSwap

					; push array to stack as reference parameters for exchangeElements
 0000011A  56				PUSH	ESI
 0000011B  E8 00000016			CALL	exchangeElements	; call exchangeElements
 00000120  BA 00000001			MOV		EDX, 1				; sets edx to 1 when exchange made

				; if no exchange, decrease LOOP counter
 00000125			_noSwap:
 00000125  83 C6 04			add		ESI, 4
 00000128  E2 E9			LOOP	_swap

					; if there was a swap/exchange, return to start loop again
 0000012A  83 FA 01			cmp		edx, 1
 0000012D  74 D6			JE		_sort

					; pop registers from stack and return
 0000012F  5A				POP		EDX
 00000130  59				POP		ECX
 00000131  5E				POP		esi
 00000132  5D				pop		ebp
 00000133  C2 0004			ret		4

 00000136			sortList ENDP

				;-------------------------------------------
				; Name: exchangeElements
				;
				; Swaps elements in the array.
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: NONE
				;
				; Receives: randArray by reference
				;
				; Returns: randArray by reference, with values exchanged in two positions
				;
				;-------------------------------------------
 00000136			exchangeElements PROC
					; push register to stack
 00000136  55				PUSH	EBP

					; swap elements at two positions
 00000137  8B EC			MOV		ebp, esp
 00000139  8B 75 08			mov		esi, [ebp+8]
 0000013C  8B 06			mov		eax, [esi]
 0000013E  8B 5E 04			mov		ebx, [esi+4]
 00000141  89 46 04			mov		[esi+4], eax
 00000144  89 1E			mov		[esi], ebx

					; pop register and return
 00000146  5D				pop		ebp
 00000147  C2 0004			ret		4

 0000014A			exchangeElements ENDP

				;--------------------------------------------
				; Name: displayMedian
				;
				; Display median element of the array. As ARRAYSIZE can change,
				;	if an ARRAYSIZE is odd, it will find the middle value. If
				;	ARRAYSIZE is even, calculate the average and round up. Prints
				;	median to terminal
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: NONE
				;
				; Receives: randArray and median variable by reference
				;
				; Returns: Nothing.
				;
				;--------------------------------------------

 0000014A			displayMedian PROC
					; push registers to stack
 0000014A  55				push	ebp
 0000014B  8B EC			mov		ebp, esp
 0000014D  56				push	esi
 0000014E  50				push	eax
 0000014F  53				push	ebx
 00000150  52				push	edx
 00000151  8B 75 0C			mov		esi, [ebp+12]

					; check ARRAYSIZE to see if it even or odd
 00000154  B8 000000C8			MOV		eax, ARRAYSIZE
 00000159  BB 00000002			mov		ebx, 2
 0000015E  99				cdq
 0000015F  F7 F3			div		ebx
 00000161  83 FA 00			cmp		edx, 0
 00000164  74 08			je		_even

					; if ARRAYSIZE is odd, then the middle element is the median
 00000166  8B 55 08			mov		edx, [ebp+8]
 00000169  8B 46 64			mov		eax, [esi + ((ARRAYSIZE + 1)/2)]
 0000016C  EB 1F			jmp		_median

				;if ARRAYSIZE is even, then two middle elements are added, divided by two, and rounded up if necessary	
 0000016E			_even:
 0000016E  8B 86 00000190		mov		eax, [esi + 4 * ARRAYSIZE / 2]			; stores middle element
 00000174  8B 9E 00000194		mov		ebx, [esi + (4 * ARRAYSIZE / 2) + 4]	; stores middle element + 1
 0000017A  03 C3			add		eax, ebx
 0000017C  BB 00000002			mov		ebx, 2
 00000181  99				cdq
 00000182  F7 F3			div		ebx
 00000184  83 FA 01			cmp		edx, 1
 00000187  75 01			jne		_noRounding
 00000189  40				inc		eax

				; if result of division is a remainder of 1 in EDX, then round up for median
 0000018A			_noRounding:
 0000018A  8B 55 08			mov		edx, [ebp + 8]

				; once median is found, print to terminal
 0000018D			_median:
 0000018D  E8 00000000 E		call	WriteString
 00000192  E8 00000000 E		call	WriteDec
 00000197  E8 00000000 E		CALL	CrLf
 0000019C  E8 00000000 E		call	CrLf
					
					; pop registers from stack and return
 000001A1  5A				POP		edx
 000001A2  5B				pop		ebx
 000001A3  58				pop		eax
 000001A4  5E				pop		esi
 000001A5  5D				pop		ebp
 000001A6  C2 0008			ret		8
					
					



 000001A9			displayMedian ENDP

				;---------------------------------------------
				; Name: displayList
				;
				; Display array with 20 elements per line to terminal
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: NONE
				;
				; Receives: two strings by reference, an array by reference and size
				;	of the array by value
				;
				; Returns: Nothing
				;
				;---------------------------------------------

 000001A9			displayList PROC
					; push registers onto stack
 000001A9  55				PUSH	EBP
 000001AA  8B EC			MOV		EBP, ESP
 000001AC  50				PUSH	EAX
 000001AD  53				push	ebx
 000001AE  51				push	ecx
 000001AF  52				push	edx
 000001B0  56				push	esi

 000001B1  BB 00000000			MOV		EBX, 0
 000001B6  8B 75 10			MOV		ESI, [EBP + 16]
 000001B9  8B 55 08			MOV		EDX, [EBP + 8]
 000001BC  8B 4D 14			MOV		ecx, [ebp + 20]

 000001BF  E8 00000000 E		CALL	WriteString
 000001C4  E8 00000000 E		CALL	CrLf
 000001C9  E8 00000000 E		call	CrLf
 000001CE  8B 55 0C			mov		edx, [EBP + 12]

				; loop through array and display each element
 000001D1			_display:
 000001D1  8B 06			mov		eax, [esi]
 000001D3  E8 00000000 E		call	WriteDec
 000001D8  E8 00000000 E		CALL	WriteString
 000001DD  83 C6 04			ADD		ESI, 4
 000001E0  43				INC		EBX
 000001E1  83 FB 14			cmp		EBX, 20			; check to see if there are 20 numbers in row
 000001E4  7C 0A			JL		_continue
 000001E6  E8 00000000 E		CALL	crlf
 000001EB  BB 00000000			mov		EBX, 0

				; no new line, so it will continue to print out elements of array
 000001F0			_continue:
 000001F0  E2 DF			LOOP	_display

 000001F2  E8 00000000 E		call	CrLf

					; pop registers off stack
 000001F7  5E				pop		ESI
 000001F8  5A				pop		EDX
 000001F9  59				pop		ecx
 000001FA  5B				pop		EBX
 000001FB  58				pop		eax
 000001FC  5D				pop		ebp
 000001FD  C2 0010			ret		16

 00000200			displayList ENDP

				;-------------------------------------------
				; Name: countList
				;
				; Counts the instance of each number in array, and the counts are placed in a
				;	new array
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: None
				;
				; Receives: randArray and counts array (blank for now) by reference
				;
				; Returns: counts array with count of instance per number in original randArray
				;
				;-------------------------------------------
 00000200			countList PROC

					; push registers onto stack
 00000200  55				push	ebp
 00000201  8B EC			mov		ebp, esp
 00000203  56				push	esi
 00000204  57				push	edi
 00000205  50				push	eax
 00000206  53				push	ebx
 00000207  51				push	ecx

 00000208  8B 75 08			mov		esi, [ebp + 8]		; randArray	
 0000020B  8B 7D 0C			mov		edi, [ebp + 12]		; counts array
 0000020E  BB 0000000F			mov		ebx, LO
 00000213  B9 000000C8			mov		ECX, ARRAYSIZE

				; loop through randArray and count each element, increment for each instance found
 00000218			_countInstance:
 00000218  8B 06			mov		eax, [esi]
 0000021A  83 C6 04			add		esi, 4
 0000021D  3B C3			cmp		eax, ebx
 0000021F  75 06			JNE		_noMatching
 00000221  FF 07			inc		DWORD PTR [EDI]
 00000223  8B 17			MOV		edx, [edi]
 00000225  EB 06			jmp		_match

				; if there is no match, move to next number, then go to _match to loop countInstance
 00000227			_noMatching:
 00000227  83 C7 04			add		edi, 4
 0000022A  FF 07			inc		DWORD PTR [EDI]
 0000022C  43				inc		EBX

				; if a match is found, loop countInstance
 0000022D			_match:
 0000022D  E2 E9			LOOP	_countInstance

					; pop registers off stack and return
 0000022F  59				pop		ecx
 00000230  5B				pop		ebx
 00000231  58				pop		eax
 00000232  5F				pop		edi
 00000233  5E				pop		esi
 00000234  5D				pop		ebp
 00000235  C2 0008			ret		8

 00000238			countList ENDP

				;-------------------------------------------
				; Name: outroMessage
				;
				; Program outro written to terminal
				;
				; Preconditions: None	
				;
				; Postconditions None
				;
				; Receives: outro string variable
				;
				; Returns: nothing
				;
				;-------------------------------------------

 00000238			outroMessage PROC
					; push registers to stack
 00000238  55				push	ebp
 00000239  8B EC			mov		ebp, esp
 0000023B  52				push	edx
 0000023C  8B 55 08			mov		edx, [ebp + 8]

					; print outro message to screen
 0000023F  E8 00000000 E		call	CrLf
 00000244  E8 00000000 E		call	WriteString
 00000249  E8 00000000 E		call	CrLf

					; pop registers and return
 0000024E  5A				pop		edx
 0000024F  5D				pop		ebp
 00000250  C2 0004			ret		4


 00000253			outroMessage ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/05/23 13:43:40
*Project5_zamoraab     (Proj5_zamoraab.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000061E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000253 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 00000200 _TEXT	Length= 00000038 Public STDCALL
  _countInstance . . . . . . . .	L Near	 00000218 _TEXT	
  _noMatching  . . . . . . . . .	L Near	 00000227 _TEXT	
  _match . . . . . . . . . . . .	L Near	 0000022D _TEXT	
displayList  . . . . . . . . . .	P Near	 000001A9 _TEXT	Length= 00000057 Public STDCALL
  _display . . . . . . . . . . .	L Near	 000001D1 _TEXT	
  _continue  . . . . . . . . . .	L Near	 000001F0 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000014A _TEXT	Length= 0000005F Public STDCALL
  _even  . . . . . . . . . . . .	L Near	 0000016E _TEXT	
  _noRounding  . . . . . . . . .	L Near	 0000018A _TEXT	
  _median  . . . . . . . . . . .	L Near	 0000018D _TEXT	
exchangeElements . . . . . . . .	P Near	 00000136 _TEXT	Length= 00000014 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000D2 _TEXT	Length= 0000002D Public STDCALL
  _fill  . . . . . . . . . . . .	L Near	 000000E0 _TEXT	
introduction . . . . . . . . . .	P Near	 000000A5 _TEXT	Length= 0000002D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A5 Public STDCALL
outroMessage . . . . . . . . . .	P Near	 00000238 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000FF _TEXT	Length= 00000037 Public STDCALL
  _sort  . . . . . . . . . . . .	L Near	 00000105 _TEXT	
  _swap  . . . . . . . . . . . .	L Near	 00000113 _TEXT	
  _noSwap  . . . . . . . . . . .	L Near	 00000125 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000616 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countsLen  . . . . . . . . . . .	DWord	 0000061A _DATA	
counts . . . . . . . . . . . . .	DWord	 00000586 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instance . . . . . . . . . . . .	Byte	 000001E6 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 000001AA _DATA	
outro  . . . . . . . . . . . . .	Byte	 00000239 _DATA	
progDesc . . . . . . . . . . . .	Byte	 00000050 _DATA	
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
randArray  . . . . . . . . . . .	DWord	 00000266 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortNum  . . . . . . . . . . . .	Byte	 000001CA _DATA	
spacing  . . . . . . . . . . . .	Byte	 00000263 _DATA	
unsortNo . . . . . . . . . . . .	Byte	 0000018C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
