Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/05/23 12:47:31
!Project5     (Proj5_zamoraab.asm			     Page 1 - 1


				TITLE Project5     (Proj5_zamoraab.asm)

				; Author: Abraham Zamora
				; Last Modified: 3/4/2026
				; OSU email address: zamoraab@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:                 Due Date: 3/5/2023
				; Description: Program generates values into an array, then sorts the array,
				;	provide the median, and counts the instances of each number in the array.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 


				; Program constants

 = 000000C8				ARRAYSIZE = 200		; set ARRAYSIZE. Initially set to 200 but can be adjusted.
 = 0000000F				LO = 15				; set LO for lowest value
 = 00000032				HI = 50				; Set HI for highest value


 00000000			.data
					; string variables
 00000000 47 65 6E 65 72		progName	BYTE	"Generating, Sorting, and Counting Random Integers! Programmed by Abraham Zamora",13,10,0
	   61 74 69 6E 67
	   2C 20 53 6F 72
	   74 69 6E 67 2C
	   20 61 6E 64 20
	   43 6F 75 6E 74
	   69 6E 67 20 52
	   61 6E 64 6F 6D
	   20 49 6E 74 65
	   67 65 72 73 21
	   20 50 72 6F 67
	   72 61 6D 6D 65
	   64 20 62 79 20
	   41 62 72 61 68
	   61 6D 20 5A 61
	   6D 6F 72 61 0D
	   0A 00
 00000052 54 68 69 73 20		progDesc	BYTE	"This program generates 200 random integers between 15 and 50, inclusive.",13,10,
	   70 72 6F 67 72
	   61 6D 20 67 65
	   6E 65 72 61 74
	   65 73 20 32 30
	   30 20 72 61 6E
	   64 6F 6D 20 69
	   6E 74 65 67 65
	   72 73 20 62 65
	   74 77 65 65 6E
	   20 31 35 20 61
	   6E 64 20 35 30
	   2C 20 69 6E 63
	   6C 75 73 69 76
	   65 2E 0D 0A 49
	   74 20 74 68 65
	   6E 20 64 69 73
	   70 6C 61 79 73
	   20 74 68 65 20
	   6F 72 69 67 69
	   6E 61 6C 20 6C
	   69 73 74 2C 20
	   73 6F 72 74 73
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6D
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 0D 0A 6F 66
	   20 74 68 65 20
	   6C 69 73 74 2C
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 73
	   6F 72 74 65 64
	   20 69 6E 20 61
	   73 63 65 6E 64
	   69 6E 67 20 6F
	   72 64 65 72 2C
	   20 61 6E 64 20
	   66 69 6E 61 6C
	   6C 79 20 64 69
	   73 70 6C 61 79
	   73 0D 0A 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 66 73 65 74
	   20 69 6E 73 74
	   61 6E 63 65 73
	   20 6F 66 66 73
	   65 74 20 65 61
	   63 68 20 67 65
	   6E 65 72 61 74
	   65 64 20 76 61
	   6C 75 65 2C 20
	   73 74 61 72 74
	   69 6E 67 20 77
	   69 74 68 20 74
	   68 65 0D 0A 6C
	   6F 77 65 73 74
	   20 6E 75 6D 62
	   65 72 2E 00
										"It then displays the original list, sorts the list, displays the median value",13,10,
										"of the list, displays the list sorted in ascending order, and finally displays",13,10,
										"the number offset instances offset each generated value, starting with the",13,10,
										"lowest number.",0

 00000196 59 6F 75 72 20		unsortNo	BYTE	"Your unsorted random numbers:",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000001B4 54 68 65 20 6D		median		BYTE	"The median value offset the array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 66
	   73 65 74 20 74
	   68 65 20 61 72
	   72 61 79 3A 20
	   00
 000001D8 59 6F 75 72 20		sortNum		BYTE	"Your sorted random numbers:",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 000001F4 59 6F 75 72 20		instance	BYTE	"Your list offset instances of each generated number, starting with the smallest value:",0
	   6C 69 73 74 20
	   6F 66 66 73 65
	   74 20 69 6E 73
	   74 61 6E 63 65
	   73 20 6F 66 20
	   65 61 63 68 20
	   67 65 6E 65 72
	   61 74 65 64 20
	   6E 75 6D 62 65
	   72 2C 20 73 74
	   61 72 74 69 6E
	   67 20 77 69 74
	   68 20 74 68 65
	   20 73 6D 61 6C
	   6C 65 73 74 20
	   76 61 6C 75 65
	   3A 00
 0000024B 47 6F 6F 64 62		outro		BYTE	"Goodbye, and thanks for using my program!",0
	   79 65 2C 20 61
	   6E 64 20 74 68
	   61 6E 6B 73 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   6D 79 20 70 72
	   6F 67 72 61 6D
	   21 00
 00000275 20 20 20 00			spacing		BYTE	"   ",0


					; dword variables
 00000279  000000C8 [			randArray	DWORD	ARRAYSIZE DUP(?)	; array that will store randomnly generated values, with a size based on ARRAYSIZE
	    00000000
	   ]
 00000599  00000024 [			counts		DWORD	HI-LO + 1 DUP(0)	; array that will store the count of each number
	    00000000
	   ]
 00000629 000000C8			array		DWORD	LENGTHOF randArray	; length of the randArray
 0000062D 00000024			countsLen	DWORD	LENGTHOF counts		; length of the counts array
					


					

 00000000			.code

 00000000			main PROC

					; call Randomize to be able to generate random numbers
 00000000  E8 00000000 E		call Randomize		

					; call introduction to the program
 00000005  68 00000000 R		PUSH OFFSET progName
 0000000A  68 00000052 R		PUSH OFFSET	progDesc
 0000000F  E8 00000091			call introduction

					; call the fillArray procedure that will generate numbers and fill an array
 00000014  68 00000279 R		PUSH OFFSET	randArray
 00000019  E8 000000AF			call fillArray

					; call displayList to print the numbers in the array
 0000001E  FF 35 00000629 R		PUSH array
 00000024  68 00000279 R		PUSH OFFSET randArray
 00000029  68 00000275 R		PUSH OFFSET	spacing
 0000002E  68 00000196 R		PUSH OFFSET unsortNo
 00000033  E8 0000016C			CALL displayList

					; call sortList and sort the array in ascending order 
 00000038  68 00000279 R		PUSH OFFSET randArray
 0000003D  E8 000000B8			call sortList

					; call displayMedian to show the median number in the array
 00000042  68 00000279 R		PUSH OFFSET randArray
 00000047  68 000001B4 R		PUSH OFFSET median
 0000004C  E8 000000F4			call displayMedian

					; call sortList again in order to show the new sorted array
 00000051  FF 35 00000629 R		PUSH array
 00000057  68 00000279 R		push OFFSET randArray
 0000005C  68 00000275 R		push OFFSET spacing
 00000061  68 000001D8 R		push OFFSET sortNum
 00000066  E8 00000139			call displayList 

					;call countList to count the instance of each number
 0000006B  68 00000599 R		PUSH OFFSET counts
 00000070  68 00000279 R		push OFFSET randArray
 00000075  E8 00000181			call countList

					; call displayList one more time to show the instance of each number
 0000007A  FF 35 0000062D R		push countsLen
 00000080  68 00000599 R		push OFFSET counts
 00000085  68 00000275 R		push OFFSET spacing
 0000008A  68 000001F4 R		push OFFSET instance
 0000008F  E8 00000110			call displayList

					; call the outroMessage to show departing message and close program
 00000094  68 0000024B R		push OFFSET	outro
 00000099  E8 00000195			CALL outroMessage

					Invoke ExitProcess,0	; exit to operating system
 0000009E  6A 00	   *	    push   +000000000h
 000000A0  E8 00000000 E   *	    call   ExitProcess

 000000A5			main ENDP

				;-----------------------------------------------------
				; Name: introduction
				;
				; Introduction procedures for program, with title, author, and
				;	the description of what the program will do.
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives: progName and progDesc by reference
				;
				; Returns: Nothing
				;
				;-----------------------------------------------------
 000000A5			introduction PROC
					; push registers into stack
 000000A5  55				PUSH	EBP
 000000A6  8B EC			MOV		EBP, ESP
 000000A8  52				PUSH	EDX
 000000A9  8B 55 0C			MOV		EDX, [EBP+12]


					; display progName and progDesc
 000000AC  E8 00000000 E		CALL	WriteString
 000000B1  E8 00000000 E		CALL	CrLF
 000000B6  8B 55 08			MOV		EDX, [EBP+8]
 000000B9  E8 00000000 E		CALL	WriteString
 000000BE  E8 00000000 E		CALL	CrLf
 000000C3  E8 00000000 E		CALL	CrLf

					; pop edx and ebp registers off the stack
 000000C8  5A				POP		EDX
 000000C9  5D				POP		EBP
 000000CA  C2 0008			RET		8

 000000CD			introduction ENDP

				;-----------------------------------------------
				; Name: fillArray
				;
				; Random numbers are generated within HI and LO (inclusive)
				;	and fill randArray with size ARRAYSIZE
				;
				; Preconditions: empty array with DWORD elements
				;
				; Postconditions: none
				;
				; Receives: randArray that is empty by reference
				;
				; Returns: filled randArray with generated values by reference
				;
				;------------------------------------------------

 000000CD			fillArray PROC
					; push registers to stack
 000000CD  55				PUSH	EBP
 000000CE  8B EC			MOV		EBP, ESP
 000000D0  50				PUSH	EAX
 000000D1  51				PUSH	ECX
 000000D2  57				PUSH	EDI
 000000D3  B9 000000C8			MOV		ECX, ARRAYSIZE
 000000D8  8B 7D 08			MOV		EDI, [EBP + 8]

				; fill will subtract LO from HI, add 1, and then generate a random number
 000000DB			_fill:
 000000DB  B8 00000032			MOV		EAX, HI
 000000E0  83 E8 0F			SUB		EAX, LO		; subtract LO from HI
 000000E3  40				INC		EAX			; add 1
 000000E4  E8 00000000 E		CALL	RandomRange	; RandomRange will generate random numbers
 000000E9  83 C0 0F			ADD		EAX, LO		; add LO to this random number to get a number between LO and HI
 000000EC  89 07			MOV		[EDI], EAX
 000000EE  83 C7 04			ADD		EDI, 4
 000000F1  E2 E8			loop	_fill

					; pop registers from stack and return
 000000F3  5F				POP		EDI
 000000F4  59				POP		ECX
 000000F5  58				POP		EAX
 000000F6  5D				POP		EBP
 000000F7  C2 0004			RET		4

 000000FA			fillArray ENDP

				;----------------------------------------------
				; Name: sortList
				;
				; Sorts an array using bubble sort. Sorted in ascending order.
				;	Returns a sorted array
				;
				; Preconditions: DWORD array
				;
				; Postconditions: None
				;
				; Receives: randArray (unsorted) by reference
				;
				; Returns: sorted randArray by reference
				;
				;----------------------------------------------

 000000FA			sortList PROC

					; push registers onto stack
 000000FA  55				PUSH	EBP
 000000FB  8B EC			MOV		EBP, ESP
 000000FD  56				PUSH	ESI
 000000FE  51				PUSH	ECX
 000000FF  52				PUSH	EDX

 00000100			_sort:
 00000100  BA 00000000			mov		EDX,0				; if elements are swapped. intial set edx to zero
 00000105  8B 75 08			MOV		ESI, [EBP + 8]
 00000108  B9 000000C8			mov		ECX, ARRAYSIZE
 0000010D  49				DEC		ecx

				; inner loop
 0000010E			_swap:
 0000010E  8B 06			MOV		EAX, [ESI]
 00000110  3B 46 04			cmp		eax, [esi + 4]
 00000113  7E 0B			jle		_noSwap

					; push array to stack as reference parameters for exchangeElements
 00000115  56				PUSH	ESI
 00000116  E8 00000016			CALL	exchangeElements	; call exchangeElements
 0000011B  BA 00000001			MOV		EDX, 1				; sets edx to 1 when exchange made

				; if no exchange, decrease LOOP counter
 00000120			_noSwap:
 00000120  83 C6 04			add		ESI, 4
 00000123  E2 E9			LOOP	_swap

					; if there was a swap/exchange, return to start loop again
 00000125  83 FA 01			cmp		edx, 1
 00000128  74 D6			JE		_sort

					; pop registers from stack and return
 0000012A  5A				POP		EDX
 0000012B  59				POP		ECX
 0000012C  5E				POP		esi
 0000012D  5D				pop		ebp
 0000012E  C2 0004			ret		4

 00000131			sortList ENDP

				;-------------------------------------------
				; Name: exchangeElements
				;
				; Swaps elements in the array.
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: NONE
				;
				; Receives: randArray by reference
				;
				; Returns: randArray by reference, with values exchanged in two positions
				;
				;-------------------------------------------
 00000131			exchangeElements PROC
					; push register to stack
 00000131  55				PUSH	EBP

					; swap elements at two positions
 00000132  8B EC			MOV		ebp, esp
 00000134  8B 75 08			mov		esi, [ebp+8]
 00000137  8B 06			mov		eax, [esi]
 00000139  8B 5E 04			mov		ebx, [esi+4]
 0000013C  89 46 04			mov		[esi+4], eax
 0000013F  89 1E			mov		[esi], ebx

					; pop register and return
 00000141  5D				pop		ebp
 00000142  C2 0004			ret		4

 00000145			exchangeElements ENDP

				;--------------------------------------------
				; Name: displayMedian
				;
				; Display median element of the array. As ARRAYSIZE can change,
				;	if an ARRAYSIZE is odd, it will find the middle value. If
				;	ARRAYSIZE is even, calculate the average and round up. Prints
				;	median to terminal
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: NONE
				;
				; Receives: randArray and median  by reference
				;
				; Returns: Nothing.
				;
				;--------------------------------------------

 00000145			displayMedian PROC
					; push registers to stack
 00000145  55				push	ebp
 00000146  8B EC			mov		ebp, esp
 00000148  56				push	esi
 00000149  50				push	eax
 0000014A  53				push	ebx
 0000014B  52				push	edx
 0000014C  8B 75 0C			mov		esi, [ebp+12]

					; check ARRAYSIZE to see if it even or odd
 0000014F  B8 000000C8			MOV		eax, ARRAYSIZE
 00000154  BB 00000002			mov		ebx, 2
 00000159  99				cdq
 0000015A  F7 F3			div		ebx
 0000015C  83 FA 00			cmp		edx, 0
 0000015F  74 08			je		_even

					; if ARRAYSIZE is odd, then the middle element is the median
 00000161  8B 55 08			mov		edx, [ebp+8]
 00000164  8B 46 64			mov		eax, [esi + ((ARRAYSIZE + 1)/2)]
 00000167  EB 1F			jmp		_median

				;if ARRAYSIZE is even, then two middle elements are added, divided by two, and rounded up if necessary	
 00000169			_even:
 00000169  8B 86 00000190		mov		eax, [esi + 4 * ARRAYSIZE / 2]			; stores middle element
 0000016F  8B 9E 00000194		mov		ebx, [esi + (4 * ARRAYSIZE / 2) + 4]	; stores middle element + 1
 00000175  03 C3			add		eax, ebx
 00000177  BB 00000002			mov		ebx, 2
 0000017C  99				cdq
 0000017D  F7 F3			div		ebx
 0000017F  83 FA 01			cmp		edx, 1
 00000182  75 01			jne		_noRounding
 00000184  40				inc		eax

				; if result of division is a remainder of 1 in EDX, then round up for median
 00000185			_noRounding:
 00000185  8B 55 08			mov		edx, [ebp + 8]

				; once median is found, print to terminal
 00000188			_median:
 00000188  E8 00000000 E		call	WriteString
 0000018D  E8 00000000 E		call	WriteDec
 00000192  E8 00000000 E		CALL	CrLf
 00000197  E8 00000000 E		call	CrLf
	
					; pop registers from stack and return
 0000019C  5A				POP		edx
 0000019D  5B				pop		ebx
 0000019E  58				pop		eax
 0000019F  5E				pop		esi
 000001A0  5D				pop		ebp
 000001A1  C2 0008			ret		8
					
					



 000001A4			displayMedian ENDP

				;---------------------------------------------
				; Name: displayList
				;
				; Display array with 20 elements per line to terminal
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: NONE
				;
				; Receives: two strings by reference, an array by reference and size
				;	of the array by value
				;
				; Returns: Nothing
				;
				;---------------------------------------------

 000001A4			displayList PROC
 000001A4  55				PUSH	EBP
 000001A5  8B EC			MOV		EBP, ESP
 000001A7  50				PUSH	EAX
 000001A8  53				push	ebx
 000001A9  51				push	ecx
 000001AA  52				push	edx
 000001AB  56				push	esi

 000001AC  BB 00000000			MOV		EBX, 0
 000001B1  8B 75 10			MOV		ESI, [EBP + 16]
 000001B4  8B 55 08			MOV		EDX, [EBP + 8]
 000001B7  8B 4D 14			MOV		ecx, [ebp + 20]

 000001BA  E8 00000000 E		CALL	WriteString
 000001BF  E8 00000000 E		CALL	CrLf
 000001C4  E8 00000000 E		call	CrLf
 000001C9  8B 55 0C			mov		edx, [EBP + 12]

 000001CC			_display:
 000001CC  8B 06			mov		eax, [esi]
 000001CE  E8 00000000 E		call	WriteDec
 000001D3  E8 00000000 E		CALL	WriteString
 000001D8  83 C6 04			ADD		ESI, 4
 000001DB  43				INC		EBX
 000001DC  83 FB 14			cmp		EBX, 20			; check to see if there are 20 numbers in row
 000001DF  7C 0A			JL		_continue
 000001E1  E8 00000000 E		CALL	crlf
 000001E6  BB 00000000			mov		EBX, 0

				; no new line, so it will continue to print out elements of array
 000001EB			_continue:
 000001EB  E2 DF			LOOP	_display

 000001ED  E8 00000000 E		call	CrLf
 000001F2  5E				pop		ESI
 000001F3  5A				pop		EDX
 000001F4  59				pop		ecx
 000001F5  5B				pop		EBX
 000001F6  58				pop		eax
 000001F7  5D				pop		ebp
 000001F8  C2 0010			ret		16

 000001FB			displayList ENDP

				;-------------------------------------------
				; Name: countList
				;
				; Counts the instance of each number in array, and the counts are placed in a
				;	new array
				;
				; Preconditions: DWORD elements
				;
				; Postconditions: None
				;
				; Receives: randArray 
				;
				; Returns: counts array
				;
				;-------------------------------------------
 000001FB			countList PROC

 000001FB  55				push	ebp
 000001FC  8B EC			mov		ebp, esp
 000001FE  56				push	esi
 000001FF  57				push	edi
 00000200  50				push	eax
 00000201  53				push	ebx
 00000202  51				push	ecx

 00000203  8B 75 08			mov		esi, [ebp + 8]		;randArray	
 00000206  8B 7D 0C			mov		edi, [ebp + 12]		; counts array
 00000209  BB 0000000F			mov		ebx, LO
 0000020E  B9 000000C8			mov		ECX, ARRAYSIZE

 00000213			_countInstance:
					
 00000213  8B 06			mov		eax, [esi]
 00000215  83 C6 04			add		esi, 4
 00000218  3B C3			cmp		eax, ebx
 0000021A  75 06			JNE		_noMatching
 0000021C  FF 07			inc		DWORD PTR [EDI]
 0000021E  8B 17			MOV		edx, [edi]
 00000220  EB 06			jmp		_match

 00000222			_noMatching:
 00000222  83 C7 04			add		edi, 4
 00000225  FF 07			inc		DWORD PTR [EDI]
 00000227  43				inc		EBX

 00000228			_match:
 00000228  E2 E9			LOOP	_countInstance


 0000022A  59				pop		ecx
 0000022B  5B				pop		ebx
 0000022C  58				pop		eax
 0000022D  5F				pop		edi
 0000022E  5E				pop		esi
 0000022F  5D				pop		ebp
 00000230  C2 0008			ret		8

 00000233			countList ENDP

				;-------------------------------------------
				; Name: outroMessage
				;
				; Program outro written to terminal
				;
				; Preconditions: None	
				;
				; Postconditions None
				;
				; Receives: outro string variable
				;
				; Returns: nothing
				;
				;-------------------------------------------

 00000233			outroMessage PROC
					; push registers to stack
 00000233  55				push	ebp
 00000234  8B EC			mov		ebp, esp
 00000236  52				push	edx
 00000237  8B 55 08			mov		edx, [ebp + 8]

					; print outro message to screen
 0000023A  E8 00000000 E		call	CrLf
 0000023F  E8 00000000 E		call	WriteString
 00000244  E8 00000000 E		call	CrLf

					; pop registers and return
 00000249  5A				pop		edx
 0000024A  5D				pop		ebp
 0000024B  C2 0004			ret		4


 0000024E			outroMessage ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30147.0	    03/05/23 12:47:31
!Project5     (Proj5_zamoraab.asm			     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000631 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000024E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001FB _TEXT	Length= 00000038 Public STDCALL
  _countInstance . . . . . . . .	L Near	 00000213 _TEXT	
  _noMatching  . . . . . . . . .	L Near	 00000222 _TEXT	
  _match . . . . . . . . . . . .	L Near	 00000228 _TEXT	
displayList  . . . . . . . . . .	P Near	 000001A4 _TEXT	Length= 00000057 Public STDCALL
  _display . . . . . . . . . . .	L Near	 000001CC _TEXT	
  _continue  . . . . . . . . . .	L Near	 000001EB _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000145 _TEXT	Length= 0000005F Public STDCALL
  _even  . . . . . . . . . . . .	L Near	 00000169 _TEXT	
  _noRounding  . . . . . . . . .	L Near	 00000185 _TEXT	
  _median  . . . . . . . . . . .	L Near	 00000188 _TEXT	
exchangeElements . . . . . . . .	P Near	 00000131 _TEXT	Length= 00000014 Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000CD _TEXT	Length= 0000002D Public STDCALL
  _fill  . . . . . . . . . . . .	L Near	 000000DB _TEXT	
introduction . . . . . . . . . .	P Near	 000000A5 _TEXT	Length= 00000028 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A5 Public STDCALL
outroMessage . . . . . . . . . .	P Near	 00000233 _TEXT	Length= 0000001B Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 000000FA _TEXT	Length= 00000037 Public STDCALL
  _sort  . . . . . . . . . . . .	L Near	 00000100 _TEXT	
  _swap  . . . . . . . . . . . .	L Near	 0000010E _TEXT	
  _noSwap  . . . . . . . . . . .	L Near	 00000120 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C8h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000629 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countsLen  . . . . . . . . . . .	DWord	 0000062D _DATA	
counts . . . . . . . . . . . . .	DWord	 00000599 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instance . . . . . . . . . . . .	Byte	 000001F4 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
median . . . . . . . . . . . . .	Byte	 000001B4 _DATA	
outro  . . . . . . . . . . . . .	Byte	 0000024B _DATA	
progDesc . . . . . . . . . . . .	Byte	 00000052 _DATA	
progName . . . . . . . . . . . .	Byte	 00000000 _DATA	
randArray  . . . . . . . . . . .	DWord	 00000279 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sortNum  . . . . . . . . . . . .	Byte	 000001D8 _DATA	
spacing  . . . . . . . . . . . .	Byte	 00000275 _DATA	
unsortNo . . . . . . . . . . . .	Byte	 00000196 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
